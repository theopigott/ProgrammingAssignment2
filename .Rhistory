library("swirl")
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar, "norf"")
names(vect2) <- c("foo", "bar, "norf")
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect(c("food", "bar"))
vect(c("food", "bar"))
vect[c("food", "bar")]
vect[c("foo", "bar")]
?seq_len
seq_len(10)
seq_len(0)
seq_len(-1)
formals(lm)
formals(seq)
formals(mean)
f <- function(a, b)
a^2
f(3, fg)
str(lapply)
?lapply
x <- matrix(rnorm(200), 5, 10)
x
apply(x, 1, quantile, probs = c(0.25, 0.75))
x <- matrix(rnorm(50), 5, 10)
x
apply(x, 1, quantile, probs = c(0.25, 0.75))
?rowMeans
mapply(rep, 1:3, 3:1)
list(rep(1,3), rep(2, 2), rep(3, 1))
?gl
x <- c(rnorm(5), runif(5, rnorm(5, 1)))
x <- c(rnorm(5), runif(5), rnorm(5, 1)))
x <- c(rnorm(5), runif(5), rnorm(5, 1))
x
x <- c(rnorm(3), runif(3), rnorm(3, 1))
x
x <- c(rnorm(3), runif(3))
x
f <- gl(2, 3)
f
tapply(x, f, mean)
gl(2, 1, 6)
tapply(x, f)
split(x, f)
split(x, 1)
split(x, c(1,2))
x
x = 1:6
f = gl(2, 1, 6)
split(x, f)
x <- rnorm(10)
f1 <- gl(2, 5)
f2 <- gl(5, 2)
split(x, list(f1, f2))
split(x, list(f1, f2), drop = TRUE)
str(split(x, list(f1, f2), drop = TRUE))
?str
interact(f1, f2)
interaction(f1, f2)
f1 = rep(c("cat", "dog"), 5)
str(split(x, list(f1, f2), drop = TRUE))
?split
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
debug(mean)
mean(x)
browser(pollutantmean)
library(pollutantmean)
source("pollutantmean.R")
pwd()
getwd()
library(datasets)
data(iris)
?iris
head(iris)
mean(iris[iris$Species == "virginica"])
q
undebug(mean)
mean(iris[iris$Species == "virginica"])
head(iris$Species)
ind <- (iris$Species == "virginica")
mean(iris$Sepal.Length(ind))
lengths <- iris["Sepal.Length"][ind]
lenths <- iris["Sepal.Length"]
lengths <- iris["Sepal.Length"]
mean(lengths[ind])
lengths[[ind]]
mean(iris[["Sepal.Length"]][iris$Species == "virginica"])
apply(iris[, 1:4], 1, mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
View(mtcars)
View(mtcars)
hps <- tapply(mtcars$hp, mtcars$cyl, mean)
hps
abs(hps[["4"]], hps[["8"]])
abs(hps[["4"]] - hps[["8"]])
debug(ls)
ls
ls()
undebug(ls)
setwd("~/Coursera/Data Science Specialisation/R Programming/Week 3/ProgrammingAssignment2")
?inv
?inverse
?return
?mat
source("cachematrix.R")
source("cachematrix.R")
x = matrix(rnorm(100), 10, 10)
x <- makeCacheMatrix(x)
cacheSolve(x)
x
x$get()
x = matrix()
x = makeCacheMatrix(matrix(rnorm(100), 10, 10))
cacheSolve(x)
x$set(matrix(rnorm(100), 10, 10))
cacheSolve(x)
x$set(matrix(rnorm(10000), 100, 100))
m <- cacheSolve(x)
m <- cacheSolve(x)
x$set(matrix(rnorm(1000000), 1000, 1000))
m <- solve(x$get)
m <- solve(x$get())
m <- cacheSolve(x$get())
m <- cacheSolve(x)
n <- cacheSolve(x)
x$set(matrix(rnorm(1000000), 1000, 1000))
m <- cacheSolve(x)
m <- cacheSolve(x)
help ("<<-")
a <- b <- c <- 6
a + b <- c <- 6
a = b <- c <- 6
a = b <- c = 6
a <- b <- c = 6
source("cacheMatrix.R")
x <- makeCacheMatrix(matrix(rnorm(100), 10, 10))
str(x)
str(x$get)
summary(x$get)
summary(x)
rm(x)
y <- makeCacheMatrix(matrix(rnorm(100), 10, 10))
x
debug(x)
debug(y)
y$get()
.Machine$double.eps
y1 <- makeCacheMatrix(matrix(1:4, 2, 2))
y2 <- makeCacheMatrix(matrix(4:1, 2, 2))
y1$get()
solve(y1.get())
solve(y1$get())
solve(y2$get())
a1 <- cacheSolve(y1)
a2 <- cacheSolve(y2)
a2
a1
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <- 1:5
v <- makeVector(x)
rm(y1, y2, y)
rm(a1, a2)
v$get()
rm(x)
v$get()
x <- 1:5
v <- makeVector(x)
rm(x)
v$get()
v
x <- 1:5
v$get()
rm(x, v)
x <- 1:5
v <- makeVector(x)
v$get()
x <- 2:6
v$get()
rm(x)
v$get()
v$get()
rm(x)
x <- 3:7
v$get()
rm(x, v)
x <- 1:5
v <- makeVector(x)
rm(x)
v$get()
rm(v)
x <- 1:5
v <- makeVector(x)
v$get()
rm(x)
v$get()
rm(x, v)
v <- makeVector(1:5)
